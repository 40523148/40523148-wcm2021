<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<p></p>
<h2>Develop</h2>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<p></p>
<h1>topic</h1>
<h2>更改網誌</h2>
<p>1 建立一個倉儲(公開)</p>
<p>2 Setting中設為master branch</p>
<p>3 clone 網址到隨身碟(<a>https://127.0.0.1:9443</a>這種，上一步產生的)</p>
<p>*網站有了，增加內容</p>
<p>4再資料夾(tmp)中建(cad2020)</p>
<p>5 git clone 這個網址</p>
<p>6 cd cad2020 </p>
<p>7 git submodule add<span> </span><a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a> cmsimde</p>
<p>8到資料夾，找到up_dir，把內容Ctrl A到\cad2020</p>
<p>(第9步起就是更改網頁)</p>
<p>9 python wsgi.py (啟動python)</p>
<p>10然後複製因為前一步產生的新網址，Ctrl C到Google看看</p>
<p>11修改後一定要記得generate page</p>
<p>(回到cmd)</p>
<p>12 cd..</p>
<p>13 git add . (add和點點中間一定要記得空白)</p>
<p>14 git commit -m "你要附註的東西"</p>
<p>15 git push,帳號密碼</p>
<p></p>
<h1>每周上課內容</h1>
<h2>W1-W2</h2>
<p>1.介紹網際網路管理這門課程，並且到 <a href="http://a.kmol.info:88/">http://a.kmol.info:88/</a> 下載 kmol2021_spring_v2.7z</p>
<p><span>2.利用 </span><a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a><span><span> </span>建立個人倉儲與網站</span></p>
<p><span>3.說明與 cmsimde 編輯及轉靜態網頁有關的認知</span></p>
<h2><span>W3</span></h2>
<p><span>分組</span></p>
<h2>W4</h2>
<p><span>簡要說明網際內容管理課程開課緣由, 以及課程目標.</span><br/><span>其次說明 wcm2021 Topic0 專案執行目的</span></p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system()
import os
# for geting html file path
import pathlib
  
# for pythn 3.9
  
'''
url:  'class_ajax.php',
data: { pselyr: pselyr, pselclss: pselclss
'''
semester = '1092'
classno = '42311'
column = True
  
if semester == None:
    semester = '1091'
if classno == None:
    # 42311 is 設一甲
    classno = '42311'
      
headers = {'X-Requested-With': 'XMLHttpRequest'}
  
url = 'https://qry.nfu.edu.tw/class_ajax.php'
post_var = {'pselyr': semester, 'pselclss': classno}
  
result = requests.post(url, data = post_var, headers = headers)
  
soup = bs4.BeautifulSoup(result.content, 'lxml')
  
# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()
  
# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})
  
# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"
  
for i in table.contents:
    # 利用 replace 復原 
    output += str(i).replace(" ", " ")
output += "&lt;/table&gt;"
# print(output)
# 將 output 寫入 w1_class_local.html
with open("w1_class_local.html", "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\w1_class_local.html")</pre>
</div>
<h5><span>將程式碼貼上 start_ipv4.bat 裡的編輯器，然後 Tools &gt; go </span></h5>
<p><br/><br/><br/><span></span>W5</p>
<p><span><strong>更新CMSIMDE</strong></span></p>
<p>更新完成，從 data&gt;tmp&gt;wcm2021&gt;cmsimde&gt;up_dir 把新的檔案拉進 wcm2021 的資料夾裡</p>
<p><span><strong>啟用 ssh</strong></span></p>
<p>進入 data&gt;PuTTY&gt;puttygen.exe&gt;Generate&gt;滑鼠在上面空白處移動，創造一把key&gt;全選&gt;複製&gt;貼到 github 設定裡的SSH&gt;要Save private key 檔案名稱為 → 學號.ppk</p>
<p></p>
<h2>W6</h2>
<p><span>建立 Heroku 帳號：</span>進入<span> </span><a href="https://heroku.com/">https://heroku.com</a>，用學校gmail登記一個 Heroku 帳號。</p>
<p>去<span> </span><a href="http://a.kmol.info:88/">http://a.kmol.info:88</a><span> ，下載heroku.7z</span></p>
<p><span></span></p>
<h2>w7</h2>
<h4>Heroku</h4>
<p><span>1.</span><span>建立 Heroku app：</span>登入 Heroku 後, 以 s + 學號建立第一個 app。</p>
<p><span>2.</span><span>下</span>載 Heroku CLI：從<span> </span><a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a><span> </span>下載 Heroku cli 程式檔案, 解壓縮到電腦。</p>
<p><span>3.</span><span>修改命令搜尋路徑：</span> 修改隨身系統的啟動批次檔案，讓 Windows 的命令視窗中可以執行 heroku.exe，（將 heroku.exe 所在目錄位置, 設為 Windows 搜尋路徑之一），再重新啟動start_ipv4 / ipv6.bat</p>
<p>4.<span>測試 heroku 執行：打</span> heroku version 看有沒有回應使用版本。</p>
<p><span>5.</span><span>設定 heroku 代理主機：因為我們用自己的筆電，因此改</span>在 y:\home_ipv4 下的 .giconfig 中,  以 git config --global http.proxy "http://your_proxy:port" 進行設定.</p>
<p>在 start_ipv4.bat 中加入:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_610730">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">REM for heroku login
REM set HTTP_PROXY=http://[2001:288:6004:17::53]:3128
REM set HTTPS_PROXY=http://[2001:288:6004:17::53]:3128</pre>
<p><span>(因為是使用自己的網路，要在開頭打上 REM 使它變成註解)</span></p>
<p><img alt="" height="539" src="/images/w7.png" width="486"/></p>
<p><img alt="" height="344" src="/images/8.JPG" width="524"/></p>
<p><span>6.設定同步倉儲：</span><span>透過 git remote add (Heroku 指令：heroku git:remote -a heroku_倉儲_名稱，之後在 heroku login 狀態下，直接用 git push) 在近端設定一個連線到 Heroku 倉儲的代號，在每次更新 Github Pages 倉儲後，把同步至 Heroku。</span></p>
<span>7.</span><span>以 git 進行提交推送：</span><span>用 heroku git:remote -a 設定的同步倉儲其推送名稱內定為 "heroku", 用 git push heroku 將改版內容推送到對應的 Heroku app 倉儲.</span></div>
<div class="syntaxhighlighter js"></div>
<div class="syntaxhighlighter js"><span>指令操作步驟:</span></div>
<div class="syntaxhighlighter js">
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 以 interactive 模式登入 Heroku, 完成後產生 y:\home_ipv4\_netrc
heroku login -i
# 針對已經登入的 Heroku 帳號下的 taiwan-01 app, 設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site.
heroku git:remote -a taiwan-no1</pre>
<img alt="" height="358" src="/images/9.JPG" width="549"/>
<p>然後我就卡在這了</p>
<p></p>
<h2>W10</h2>
<p>1.到 <a href="http://a.kmol.info:88/">http://a.kmol.info:88/</a><span> 下載 </span>robodk522_kmol.7z</p>
<p>2.到 <a href="https://sqlitebrowser.org/dl/">https://sqlitebrowser.org/dl/</a> 下載 DB Browser for SQLite - .zip (no installer) for 64-bit</p>
</div>
<h2>W11</h2>
<p>執行robodk</p>
<p>1.到 ipv4.bat 編輯</p>
<p><img alt="" height="393" src="/images/1.PNG" width="431"/></p>
<p><span>2.啟動 ipv4.bat，執行 pip install robodk</span></p>
<p><span><img alt="" height="389" src="/images/2.PNG" width="429"/></span></p>
<p><span>3.拉 pick_and_place.py 到 SciTE 編輯器中</span></p>
<p><span><img alt="" height="391" src="/images/3.PNG" width="432"/></span></p>
<p><span>4.Tools go</span></p>
<p><span><img alt="" height="429" src="/images/4.png" width="764"/></span></p>
<h2>W12</h2>
<p>OBS + Youtube 分組直播錄影</p>
<p>1.建立頻道</p>
<img alt="" height="560" src="/images/5.JPG" width="331"/><br/>
<p><span>2.進行直播</span></p>
<p><span><img alt="" height="267" src="/images/6.JPG" width="802"/></span></p>
<p><span>3.完成手機驗證</span></p>
<p><span></span></p>
<h2>W13</h2>
<p>開始遠距教學</p>
<p></p>
<h2>W14</h2>
<p>分組網站連結建立</p>
<p></p>
</div>
</div>
<h2>W15</h2>
<p>第15週自評分數</p>
<p>老師回答我們課程遇到的問題</p>
<p>每組錄製30分鐘開會操作影片</p>
<p></p>
<h1>教室排課表</h1>
<p>電腦輔助設計室排課表</p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
   
# for pythn 3.9
proxy = 'http://[2001:288:6004:17::69]:3128'
   
os.environ['http_proxy'] = proxy
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
   
'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
semester = '1092'
classroomno = 'BGA0710'
column = True
   
if semester == None:
    semester = '1092'
if classroomno == None:
    # BGA0810 電腦輔助設計室
    classroomno = 'BGA0710'
       
headers = {'X-Requested-With': 'XMLHttpRequest'}
   
url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
post_var = {'pselyr': semester, 'pselclssroom': classroomno}
   
result = requests.post(url, data = post_var, headers = headers)
   
soup = bs4.BeautifulSoup(result.content, 'lxml')
   
# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()
   
# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})
   
# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"
   
for i in table.contents:
    # 利用 replace 復原 
    output += str(i).replace(" ", " ")
output += "&lt;/table&gt;"
#print(output)
   
# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)</pre>
<p>在這之中其中有一行,是因為使用著習慣設定會在空白出現&amp;nbsp 而將那一行更改成</p>
<p>output += str(i).replace("&amp;amp;nbsp", " &amp;nbsp; ")</p>
<p>即可</p>
<p>每一間都有屬於自己的教室編碼</p>
<p>要在classroomno 打出相對的教室編碼</p>
<p>即能查出課表</p>
最後成品網頁</div>
<div class="line number1 index0 alt2"><img alt="" height="619" src="/images/10.png" width="628"/></div>
<h1>錯誤排除</h1>
<h2>cmsimde錯誤</h2>
<p>github 送上去的資料沒有綠勾，cmsimde開不起來，要刪除cmsimde重新安裝。</p>
<ol>
<li>Delete the relevant section from the<span> </span><code>.gitmodules</code><span> </span>file.</li>
<li>Stage the<span> </span><code>.gitmodules</code><span> </span>changes:<code>git add .gitmodules</code></li>
<li>Delete the relevant section from<span> </span><code>.git/config</code>.</li>
<li>Remove the submodule files from the working tree and index:<code>git rm --cached path_to_submodule</code><span> </span>(no trailing slash).</li>
<li>Remove the submodule's<span> </span><code>.git</code><span> </span>directory:<code>rm -rf .git/modules/path_to_submodule</code></li>
<li>Commit the changes:<code>git commit -m "Removed submodule &lt;name&gt;"</code></li>
<li>Delete the now untracked submodule files:<code>rm -rf path_to_submodule</code></li>
</ol>
<p>步驟</p>
<p>1.把wcm2021的<code>.gitmodules</code> 刪掉</p>
<p>2.打<span>git add .gitmodules指令</span></p>
<p><span>3.打git rm --cached cmsimde</span></p>
<p><span>4.打rm -rf .git/modules/path_to_submodule #無法用rm，直接進到cp2020/.git檔/modules/刪掉cmsimde資料夾</span></p>
<p><span>5.打git commit -m "cmsimde"</span></p>
<p><span>6.打rm -rf path_to_submodule #無法用rm，直接進到cp2020刪掉cmsimde資料夾</span></p>
<p>7.git submodule add<span> </span><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a></p>
<p>8.git add .</p>
<p>9.git commit -m "name"</p>
<p>10.git push</p>
<p>常用指令</p>
<p>git version /檢查git</p>
<p>path /目前命令列的指令</p>
<p>git clone /複製遠端的內容下載</p>
<p>git submodule add https://github.com/mdecourse/cmsimde.git cmsimde /建立cmsimde目錄已子模組存在加進來從網址下載</p>
<p>git config --global http.proxy http://[2001:288:6004:17::69]:3128 /設定proxy</p>
<p>git config --global user.name "40523148" /設定身份名子</p>
<p>git config --global user.email "40523148@mde.nfu.edu.tw" /設定身份信箱</p>
<p>python wsgi.py /用python執行動態網頁</p>
<p>git add . /增加所做的是納入進去</p>
<p>git commit -m "名稱" /設定標籤名子</p>
<p>git push /推送資料</p>
<p>git pull</p>
<p>git clone --recurese-submadules 網址</p>
<p>git remote add gitlab</p>
<p>git push gitlab 網址</p>
<p></p>
<h2>在家無法推送進端到遠端</h2>
<p>我使用的解決方法</p>
<h4>啟用ssh</h4>
<h4>要先改.git裡面的config</h4>
<h4>[remote "origin"]把之前的https加上#</h4>
<p><img alt="" height="405" src="/images/11.png" width="414"/></p>
<h4>開啟putty(putty.exe)   將設定調好</h4>
<h4>點github.com  案load</h4>
<h4>設定proxy(使用自家網路、手機網路請選None)</h4>
<h4>看你的網路連到哪一台 就打一樣的proxy</h4>
<h4>打開SSH裡面的Auth</h4>
<h4>選擇你所生產的金鑰檔案(.ppk)</h4>
<h4>回到session點選save再open</h4>
<p><img alt="" height="345" src="/images/12.png" width="546"/></p>
<h4>出現上圖就代表成功</h4>
<h4>一樣先進到cd2021  → cd tmp/cd2021</h4>
<h4>git add .</h4>
<h4>git commit -m "此更新的主旨"</h4>
<h4>git push</h4>
<h4>(此方法不需打帳號密碼)</h4>
<p></p>
<p></p>
<p></p>
<h1>SSH</h1>
<p><strong>為什麼要使用SSH?</strong></p>
<p>不使用SSH時，在git push至倉儲必須輸入密碼，然而，在公開場所輸入密碼顯然是件高風險的事!</p>
<p>因此，藉由在本地跟遠端倉儲存入密鑰，在git push時即可藉由密鑰做身分認證，不必在每次推送時，還需要輸入密碼，大大減少曝光風險。</p>
<p></p>
<p><strong>如何使用SSH?</strong></p>
<p><strong></strong></p>
<p>step1.</p>
<p>進入shell環境</p>
<p><img alt="" height="299" src="/images/下載.jpg" width="573"/></p>
<p><strong></strong></p>
<p></p>
<p>step2.</p>
<p>使用以下指令創建key</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">ssh-keygen -t rsa -b 4096 -C "使用者學號"</pre>
<p><span>並確定是否成功創建</span><br/><br/></p>
<p><img alt="" height="262" src="/images/下載.png" width="607"/></p>
<p></p>
<p>step3.</p>
<p>利用Putty中的<span>puttygen.exe 將id_rsa解讀成private key</span></p>
<p><span><img alt="" height="372" src="/images/1.PNG" width="408"/></span></p>
<p></p>
<p>step4.</p>
<p>進入倉儲頁面，點選setting，進入SSH &amp; GPG keys中點選New SSH key,將public key存入遠端倉儲</p>
<p><img alt="" height="447" src="/images/未命名.png" width="794"/></p>
<p></p>
<p>step5.</p>
<p>編譯start.bat，加入以下</p>
<p></p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">set GIT_HOME=%Disk%:\portablegit\bin\
set GIT_SSH=%Disk%:\putty\plink.exe</pre>
<p></p>
<p>step6.</p>
<p>編譯.git下的config，使其變為SSH認證</p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[submodule]
    active = .
[remote "origin"]
    #url = https://github.com/mdecourse/cad2020.git
    url = git@github.com:mdecourse/cad2020.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
    remote = origin
    merge = refs/heads/master
[submodule "cmsimde"]
    url = https://github.com/mdecourse/cmsimde.git
</pre>
<p>final step</p>
<p>進入<span>putty.exe，將本地的private key做login</span></p>
<p><span><img alt="" height="342" src="/images/2.PNG" width="377"/></span></p>
<img alt="" height="339" src="/images/3.PNG" width="376"/></div>
</div>
<p><span>*完成後請測試推送，成功使用SSH推送後，倉儲的SSH頁面的鑰匙會變成綠色的，並在下方顯示推送日期</span></p>
<p><span></span></p>
<h1>心得與評分</h1>
<p><span></span>60</p>
<p>本學期的課上的很坎坷，也經歷到遠距上課，雖然我開始的課程沒有跟上進度，雖然說現在也沒有跟到進度，但我努力的排除了遇到的一些問題，像是在家沒辦法推到遠端的問題，還有PUTTY設定要注意有沒有少打到字，HEROKU能不能同步，雖然這部分我嘗試好久都沒成功，但是我都有嘗試去解決，但只能解決前面2個遇到的問題。我知道這種類別的課程很重要，在未來，就是電腦的時代，所以要懂得一些關於電腦的設定，一些網站的架設，但這都關係到程式語言，這到現在對於我來說還是不懂的多，所以我在未來還是要努力，才能跟上世界的腳步，所以希望老師能給我及格，可以順利畢業</p>